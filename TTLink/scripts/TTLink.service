#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})
# Determines a path that can be used for relative path references.
cd ${scripts_dir}
# source file
source ${scripts_dir}/settings.ini
chain_name="BOX_XRAY"
# check iptables_version
ipt1=$(iptables --version | busybox awk '/^iptables/ {print $2}')
ipt2="v1.6.1"
var1=$(echo "$ipt1" | busybox sed 's/v//g; s/\.//g')
var2=$(echo "$ipt2" | busybox sed 's/v//g; s/\.//g')

if [ "$var1" -ge "$var2" ]; then
  IPV="iptables -w 64"
  IP6V="ip6tables -w 64"
else
  IPV="iptables"
  IP6V="ip6tables"
fi

disable_ipv6() {
  echo 0 >/proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 >/proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 >/proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 >/proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 >/proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}

enable_ipv6() {
  echo 1 >/proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 >/proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 >/proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 >/proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 >/proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}

device_index() {
  local max_retries=5
  local retry_count=0
  index=""
  if [ ! -f "${scripts_dir}/tables.tmp" ]; then
    device=$(awk -F'"' '/"interface_name"/ {print $4; exit}' ${box_confs_dir}/*.json)
    while [ -z "$index" ] && [ $retry_count -lt $max_retries ]; do
      index=$(ip route show table all | grep -E "dev ${device} table [0-9]" | head -n 1 | awk '{print $5}')
      if [ -n "$index" ]; then
        break
      fi
      sleep 1
      retry_count=$((retry_count + 1))
    done
    echo "${index} ${device}" >${scripts_dir}/tables.tmp
  fi
  read index device <"${scripts_dir}/tables.tmp"
}

ip_rules() {
  device_index
  local action=$1
  ipv4_rules=(
    "iif lo goto 6000 priority 5000"
    "iif ${device} lookup main suppress_prefixlength 0 priority 5010"
    "iif ${device} goto 6000 priority 5020"
    "from 10.0.0.0/8 lookup ${index} priority 5030"
    "from 172.16.0.0/12 lookup ${index} priority 5040"
    "from 192.168.0.0/16 lookup ${index} priority 5050"
    "nop priority 6000"
    "lookup main priority 7000"
    "from all iif ${device} lookup main suppress_prefixlength 0 priority 8000"
  )
  for rule in "${ipv4_rules[@]}"; do
    ip -4 rule "${action}" ${rule}
  done

  ipv6_rules=(
    "iif lo goto 6000 priority 5000"
    "iif ${device} lookup main suppress_prefixlength 0 priority 5010"
    "iif ${device} goto 6000 priority 5020"
    # "from 2001:db8::/32 lookup ${index} priority 5030"
    # "from fc00::/7 lookup ${index} priority 5040"
    # "from fd00::/8 lookup ${index} priority 5050"
    "nop priority 6000"
    "lookup main priority 7000"
    "from all iif ${device} lookup main suppress_prefixlength 0 priority 8000"
  )
  for rule in "${ipv6_rules[@]}"; do
    ip -6 rule "${action}" ${rule}
  done
}

iptables_rules4tun() {
  local iptables=$1
  local action=$2
  if [[ "${action}" == "-I" ]]; then
    ${iptables} -N TUN_FORWARD 2>/dev/null
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} "${action}" TUN_FORWARD -i "${device}" -j ACCEPT
    ${iptables} "${action}" TUN_FORWARD -o "${device}" -j ACCEPT
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
  elif [[ "${action}" == "-D" ]]; then
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} -X TUN_FORWARD 2>/dev/null
  fi
  # quic
  ${iptables} "${action}" OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
  ${iptables} "${action}" OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
}

dns_rules4tun() {
  device_index
  local name="DNS2TUN"
  local ip=${1}
  local iptables=${2}
  local action=${3}
  if [[ "${network_mode}" == "tun" ]]; then

    if [[ "${action}" == "-A" ]]; then
      local action1="add"
    elif [[ "${action}" == "-D" ]]; then
      local action1="del"
    fi

    ${ip} rule ${action1} fwmark 53 table ${index} priority 100
    ${ip} route ${action1} default dev ${device} table ${index}

    if [[ "${action}" != "-D" ]]; then
      ${iptables} -t mangle -N ${name}
      ${iptables} -t mangle -F ${name}
      ${iptables} -t mangle ${action} ${name} -p udp --dport 53 -j MARK --set-mark 53
      ${iptables} -t mangle ${action} ${name} -p tcp --dport 53 -j MARK --set-mark 53
      log Info "${iptables} ${name} rule has been created" >>"${parent_dir}/log/run.log"
    fi

    ${iptables} -t mangle ${action} OUTPUT -j ${name}
    ${iptables} -t mangle ${action} PREROUTING -j ${name}

    if [[ "${action}" == "-D" ]]; then
      ${iptables} -t mangle -F ${name}
      ${iptables} -t mangle -X ${name}
      log Info "${iptables} ${name} rule has been removed" >>"${parent_dir}/log/run.log"
    fi

  else
    return
  fi
}

execute_dns_rules4tun() {
  dns_rules4tun "ip -4" "iptables" "-A"
  dns_rules4tun "ip -6" "ip6tables" "-A"
}

remove_dns_rules4tun() {
  dns_rules4tun "ip -4" "iptables" "-D"
  dns_rules4tun "ip -6" "ip6tables" "-D"
}

forward() {
  local action=$1
  if [[ "${action}" == "-I" ]]; then
    echo 1 >/proc/sys/net/ipv4/ip_forward
    echo 2 >/proc/sys/net/ipv4/conf/default/rp_filter
    echo 2 >/proc/sys/net/ipv4/conf/all/rp_filter
    enable_ipv6
    ip_rules "add"
  elif [[ "${action}" == "-D" ]]; then
    disable_ipv6
    ip_rules "del"
  fi
  iptables_rules4tun "iptables" "${action}"
  iptables_rules4tun "ip6tables" "${action}"
}

initialize_uids() {
  uid=""
  uids=()
  # Remove the uids.list file if it exists
  if [ -f "${scripts_dir}/uids.list" ]; then
    rm "${scripts_dir}/uids.list"
  fi
  # Loop through package_list to get UID and output it to uids.list
  for package_name in "${package_list[@]}"; do
    uid=$(busybox awk -v package="${package_name}" '$1 == package {print $2}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uids+=("${uid}")
      echo "${package_name}: ${uid}" >>"${scripts_dir}/uids.list"
    fi
  done
  sort -t ':' -k2 -n "${scripts_dir}/uids.list" -o "${scripts_dir}/uids.list"
  # Add box_user and xray_user to the uids array, then sort it
  if [[ "${network_mode}" == "tun" && ${#package_list[@]} -eq 0 ]]; then
    uids+=("${box_user}" "${xray_user}")
  fi
  uids=($(printf "%s\n" "${uids[@]}" | sort -n | uniq))
}

uid_intervals() { # Output UID ranges, e.g., 12345-22345 22346-32346
  initialize_uids
  start=0
  end=999999

  previous=$start
  for uid in "${uids[@]}"; do
    # If the current UID is greater than previous by 1, output the range
    if [[ $((uid - 1)) -ge $previous ]]; then
      echo "${previous}-$((uid - 1))"
    fi
    previous=$((uid + 1))
  done
  # If the last UID is less than end, output the final range
  if [[ $previous -le $end ]]; then
    echo "${previous}-${end}"
  fi
}

package_rules4tun() {
  local action=${1}
  stdout2array=()
  # If in whitelist mode and stdout2array is not empty
  if [[ "${proxy_mode}" == "whitelist" ]] && [[ ${#package_list[@]} -gt 0 ]]; then
    # Get the UID range output
    stdout2array=($(uid_intervals))
    for whiteapp in "${stdout2array[@]}"; do
      ip -4 rule ${action} from all uidrange ${whiteapp} priority 9000 goto 9010
      ip -6 rule ${action} from all uidrange ${whiteapp} priority 9000 goto 9010
    done
    # If proxy_mode is in blacklist mode, execute the logic regardless of whether the array is empty or not;
    # If proxy_mode is in whitelist mode, execute the logic only when the array is empty.
  elif [[ "${proxy_mode}" == "blacklist" ]] && [[ ${#package_list[@]} -ge 0 ]] ||
    [[ "${proxy_mode}" == "whitelist" ]] && [[ ${#package_list[@]} -eq 0 ]]; then
    # Get the UID output
    initialize_uids
    for blackapp in "${uids[@]}"; do
      ip -4 rule ${action} from all uidrange ${blackapp}-${blackapp} priority 9000 goto 9010
      ip -6 rule ${action} from all uidrange ${blackapp}-${blackapp} priority 9000 goto 9010
    done
  else
    return
  fi
}

# Function to create TPROXY rules
iptables_rules() {
  ${1} rule add fwmark "${fwmark}" table ${2} priority $((${2} * 10))
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -N DIVERTSV
  ${3} -t mangle -F DIVERTSV

  # Create custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  ${3} -t mangle -A ${4}_LOCAL -p tcp --dport 53 -j MARK --set-mark ${fwmark}

  ${3} -t mangle -A ${4}_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -j RETURN
  done

  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  if [[ "${ap_list}" != "" ]]; then
    for ap in ${ap_list[@]}; do
      ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
      ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    done
  fi

  if [[ -n "${AIDs}" ]]; then
    for AID in ${AIDs[*]}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
    done
  fi

  case "${proxy_mode}" in
  "blacklist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp ! --dport 53 -j RETURN
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
      done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    else
      # When the blacklist array is empty, route all traffic through the proxy.
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  "whitelist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
      done
    else
      # When the whitelist array is empty, route all traffic through the proxy.
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  *)
    log Error "proxy_mode incorrect" >>"${parent_dir}/log/run.log"
    ;;
  esac

  # Loopback prevention rules 1
  ${3} -t mangle -I ${4}_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  ${3} -t mangle -I ${4}_LOCAL -m owner --uid-owner ${xray_user} --gid-owner ${xray_group} -j RETURN
  # Loopback prevention rules 2
  ${3} -t mangle -A DIVERTSV -j MARK --set-mark "${fwmark}"
  ${3} -t mangle -A DIVERTSV -j ACCEPT

  # Referencing custom chains
  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -I PREROUTING -p tcp -m socket -j DIVERTSV
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
  log Info "All $(echo "${4}" | awk '{print $1}') chains have been created" >>"${parent_dir}/log/run.log"
}

# Function to execute proxy rules
run_iptables_rules() {
  log Info "tp_port: ${tp_port}" >>"${parent_dir}/log/run.log"
  iptables_rules ip "${table}" "${IPV}" "${chain_name}" "${intranet[*]}" "${uids[*]}"
  iptables_rules "ip -6" "$((${table} * 2))" "${IP6V}" "${chain_name}6" "${intranet6[*]}" "${uids[*]}"
}

# Function to delete iptables rules
del_iptables_rules() {
  ${1} rule del fwmark "${fwmark}" table ${2} priority $((${2} * 10))
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}

  while true; do
    # Preload the chain rules in the mangle table into a variable
    IPTABLES_DUMP=$(${3} -t mangle -L -nv)

    # Remove references
    if echo "$IPTABLES_DUMP" | grep -q "${4}_EXTERNAL"; then
      ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
    fi
    if echo "$IPTABLES_DUMP" | grep -q "DIVERTSV"; then
      ${3} -t mangle -D PREROUTING -p tcp -m socket -j DIVERTSV
    fi
    if echo "$IPTABLES_DUMP" | grep -q "${4}_LOCAL"; then
      ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
    fi

    # Flush custom chains
    for chain in "${4}_EXTERNAL" "DIVERTSV" "${4}_LOCAL"; do
      if ${3} -t mangle -L $chain -nv &>/dev/null; then
        ${3} -t mangle -F $chain
      fi
    done

    # Delete custom chains
    for chain in "${4}_EXTERNAL" "DIVERTSV" "${4}_LOCAL"; do
      if ${3} -t mangle -L $chain -nv &>/dev/null; then
        ${3} -t mangle -X $chain
      fi
    done

    # Confirm all chains have been deleted
    if ! echo "$IPTABLES_DUMP" | grep -q -E "${4}_EXTERNAL|DIVERTSV|${4}_LOCAL"; then
      log Info "All $(echo "${4}" | awk '{print $1}') chains have been deleted" >>"${parent_dir}/log/run.log"
      break
    fi

    sleep 1 # Delay to avoid frequent looping
  done
}

# Function to execute delete proxy rules
run_del_iptables_rules() {
  del_iptables_rules ip "${table}" "${IPV}" "${chain_name}"
  del_iptables_rules "ip -6" "$((${table} * 2))" "${IP6V}" "${chain_name}6"
}

# Function to create task
cron_task() {
  if [[ "${crond_task}" == "true" ]]; then
    crontab_file="${scripts_dir}/root"
    if pgrep busybox crond >/dev/null; then
      kill -9 $(pgrep busybox crond)
    fi
    echo '5 0,12 * * * touch /data/adb/modules/TTLink/disable && sleep 3 && rm /data/adb/modules/TTLink/disable' >${crontab_file}
    nohup busybox crond -c ${scripts_dir}/ >/dev/null 2>&1 &
    log Info "New task: $(busybox crontab -l -c ${scripts_dir}/)"
  else
    log Warn "crond_task is not set to true. No crond task created."
  fi
}

# Function to delete task
del_task() {
  if pgrep busybox crond >/dev/null; then
    kill -9 $(pgrep busybox crond)
    rm ${scripts_dir}/root >/dev/null 2>&1
  fi
}

# Disable QUIC
quic="disable"

disable_quic() {
  ${1} ${2} OUTPUT -p udp --dport 443 -m owner ! --gid-owner ${box_group} -j REJECT
  ${1} ${2} OUTPUT -p udp --dport 80 -m owner ! --gid-owner ${box_group} -j REJECT
  if [[ "${2}" == "-D" ]]; then
    while ${1} -C OUTPUT -p udp --dport 443 -m owner ! --gid-owner ${box_group} -j REJECT ||
      ${1} -C OUTPUT -p udp --dport 80 -m owner ! --gid-owner ${box_group} -j REJECT; do
      del_disable_quic
    done
  fi
}

run_disable_quic() {
  if [[ "${quic}" == "disable" ]]; then
    disable_quic "${IPV}" "-I"
    disable_quic "${IP6V}" "-I"
  fi
}

del_disable_quic() {
  if [[ "${quic}" == "disable" ]]; then
    disable_quic "${IPV}" "-D"
    disable_quic "${IP6V}" "-D"
  fi
}

# description
version() {
  version_box=$(${bin_box} version | head -n 1 | awk '{print $3}')
  version_xray=$(${bin_xray} version | head -n 1 | awk '{print $2}')
}

description() {
  local symbol=$1
  local event=$2
  version
  prop_file="/data/adb/modules/TTLink/module.prop"
  core_name_box="${bin_box##*/}"
  core_name_xray="${bin_xray##*/}"
  current_time=$(date "+[%m.%d %H:%M]")
  sed -i "/description/c\description=${current_time} ${symbol} ${core_name_box} ${version_box} work with ${core_name_xray} ${version_xray} ${network_mode} ${event}" "${prop_file}"
  log Info "${symbol} ${network_mode} ${event}" >>"${parent_dir}/log/run.log"
}

run_description() {
  if pidof "${bin_box}" >/dev/null 2>&1; then
    description "🤪" "started"
  else
    description "🥴" "stopped"
  fi
}

ownership() {
  local bin_name=$1
  chmod 755 ${bin_name}
  chown root:net_admin ${bin_name}
  chmod o+rw ${public_log_dir}
  find "${parent_dir}" -type f -name "*.log" ! -name "run.log" -exec rm -f {} + 2>/dev/null
}

launch_cores() {
  ulimit -SHn 1000000
  if [[ -f "${bin_box}" && -f "${bin_xray}" ]]; then
    ownership "${bin_box}"
    nohup busybox setuidgid ${box_user}:${box_group} ${bin_box} run -C ${box_confs_dir} -D ${parent_dir}/binary/ >/dev/null 2>&1 &
    if [[ "${network_mode}" == "tun" ]]; then
      forward -I
      package_rules4tun add
      [[ "${dns2tun}" == "true" ]] && execute_dns_rules4tun
    fi
    ownership "${bin_xray}"
    nohup busybox setuidgid ${xray_user}:${xray_group} ${bin_xray} run -confdir ${xray_confs_dir} >/dev/null 2>&1 &
  else
    if [[ ! -f "${bin_box}" && ! -f "${bin_xray}" ]]; then
      log Error "Both binaries are missing: $(basename "${bin_box}") and $(basename "${bin_xray}")" >>"${parent_dir}/log/run.log"
      toast "Error: Both binaries are missing: $(basename "${bin_box}") and $(basename "${bin_xray}"). Please check your installation."
    elif [[ ! -f "${bin_box}" ]]; then
      log Error "Binary missing: $(basename "${bin_box}")" >>"${parent_dir}/log/run.log"
      toast "Error: Missing binary $(basename "${bin_box}"). Please check your installation."
    elif [[ ! -f "${bin_xray}" ]]; then
      log Error "Binary missing: $(basename "${bin_xray}")" >>"${parent_dir}/log/run.log"
      toast "Error: Missing binary $(basename "${bin_xray}"). Please check your installation."
    fi
  fi
}

shutdown_cores() {
  pid=$(pidof "${bin_box}")
  kill "${pid}" >/dev/null 2>&1
  log Info "sing-box process (${pid}) terminated." >>"${parent_dir}/log/run.log"

  pid=$(pidof "${bin_xray}")
  kill "${pid}" >/dev/null 2>&1
  log Info "xray process (${pid}) terminated." >>"${parent_dir}/log/run.log"

  rm -f ${scripts_dir}/*.list
  find "${parent_dir}" -type f -name "*.log" ! -name "run.log" -exec rm -f {} +
}

start_tun() {
  log Info "---welcome---" >"${parent_dir}/log/run.log"
  if [[ -n $(pidof "${bin_box}") || -n $(pidof "${bin_xray}") ]]; then
    log Info "Close existing processes"
    stop_tun
    log Info "---restart---" >"${parent_dir}/log/run.log"
  fi
  launch_cores
  cron_task
  toast "TUN已启动"
}

stop_tun() {
  if [[ -z $(pidof "${bin_box}") && -z $(pidof "${bin_xray}") ]]; then
    exit 1
  fi
  log Info "---goodbye---" >"${parent_dir}/log/run.log"
  forward -D
  [[ "${dns2tun}" == "true" ]] && remove_dns_rules4tun
  package_rules4tun del
  rm -f ${scripts_dir}/tables.tmp
  del_task
  shutdown_cores
  toast "TUN已关闭"
}

start_tproxy() {
  log Info "---welcome---" >"${parent_dir}/log/run.log"
  if [[ -n $(pidof "${bin_box}") || -n $(pidof "${bin_xray}") ]]; then
    log Info "Close existing processes"
    stop_tproxy
    log Info "---restart---" >"${parent_dir}/log/run.log"
  fi
  initialize_uids
  run_iptables_rules
  run_disable_quic
  launch_cores
  cron_task
  toast "TP已开启"
}

stop_tproxy() {
  if [[ -z $(pidof "${bin_box}") && -z $(pidof "${bin_xray}") ]]; then
    exit 1
  fi
  log Info "---goodbye---" >"${parent_dir}/log/run.log"
  run_del_iptables_rules >/dev/null 2>&1
  del_disable_quic
  del_task
  shutdown_cores
  toast "TP已关闭"
}

InboundsChange() {
  if [[ "${network_mode}" == "tproxy" ]]; then
    $yq '.inbounds = [{
      "type": "tproxy",
      "tag": "tproxy-in",
      "listen": "::",
      "listen_port": 2025,
      "sniff": true,
      "sniff_override_destination": true
    }]' -i --output-format=json "${box_config_file}"
    tp_port=$(awk -F':' '/"listen_port"/ {gsub(/[^0-9]/, "", $NF); print $NF; exit}' "${box_confs_dir}"/*.json 2>/dev/null)
  else
    $yq '.inbounds = [{
      "type": "tun",
      "tag": "tun-in",
      "interface_name": "tun0",
      "mtu": 1400,
      "auto_route": true,
      "strict_route": true,
      "endpoint_independent_nat": true,
      "address": [
        "172.18.0.1/30",
        "fdfe:dcba:9876::1/126"
      ],
      "stack": "system",
      "sniff": true,
      "sniff_override_destination": true
    }]' -i --output-format=json "${box_config_file}"
  fi
}

case "$1" in
enable)
  if [[ "${network_mode}" == "tproxy" ]]; then
    InboundsChange
    start_tproxy
    run_description
  else
    InboundsChange
    start_tun
    run_description
  fi
  ;;
disable)
  if [[ "${network_mode}" == "tproxy" ]]; then
    stop_tproxy
    run_description
  else
    stop_tun
    run_description
  fi
  ;;
esac

# TTLink.service
